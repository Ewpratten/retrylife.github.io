<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2019-09-10T10:43:19-04:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Evan Pratten</title><subtitle>Computer wizard, student, &lt;a href=&quot;https://frc5024.github.io&quot;&gt;@frc5024&lt;/a&gt;  programming team lead, and radio enthusiast.</subtitle><entry><title type="html">Doing Python OOP the wrong way</title><link href="http://0.0.0.0:4000/blog/2019/09/07/wrong-python" rel="alternate" type="text/html" title="Doing Python OOP the wrong way" /><published>2019-09-07T09:13:00-04:00</published><updated>2019-09-07T09:13:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/09/07/wrong-python</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/09/07/wrong-python">&lt;p&gt;If you know me, you probably know of the many weird things I do with python. Most recent of which being this &lt;a href=&quot;https://en.wikipedia.org/wiki/Fizz_buzz&quot;&gt;FizzBuzz&lt;/a&gt; implementation in one line of python code:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This installment of “weird things I do with python” will not focus on one-liners (that’s going on my todo list though). But instead, playing with Python’s classes and object system.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-introduction-to-classes&quot;&gt;A quick introduction to classes&lt;/h2&gt;
&lt;p&gt;Im going to assume that you, the reader, have some reasonable knowledge of how computers work, and OOP concepts. If you do not, there are &lt;a href=&quot;https://medium.com/swlh/5-free-object-oriented-programming-online-courses-for-programmers-156afd0a3a73&quot;&gt;many great online resources&lt;/a&gt; to help you out.&lt;/p&gt;

&lt;p&gt;As a quick refresher, this is the Python syntax for a basic class:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# This is the constructor. __init__ is an overridable python built-in
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Here we set the class' scoped my_number to arg1
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printMyNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is really just a fancy setter and getter. Here is some example usage:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printMyNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;noticing-something-odd&quot;&gt;Noticing something odd&lt;/h2&gt;
&lt;p&gt;Before reading the following, keep in mind that (as of now) I have not actually looked at the Python interpreter’s source code enough to know about their memory system. The following is just an educated guess.&lt;/p&gt;

&lt;p&gt;Looking at any python class, you may notice that &lt;strong&gt;at least&lt;/strong&gt; 1 argument is required. &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is used to access the class’ data from itself. This is not present in most other languages I know, which means there might be something interesting happening behind the scenes. Here is a re-implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; from above in java:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;my_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printMyNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the fact that there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;? Yet Java methods can still access class data.&lt;/p&gt;

&lt;h2 id=&quot;implementing-objects-in-a-non-object-oriented-language&quot;&gt;Implementing objects in a non-object oriented language&lt;/h2&gt;
&lt;p&gt;In a non-OOP language (like C), objects can be faked by creating &lt;a href=&quot;https://en.wikipedia.org/wiki/Struct_(C_programming_language)&quot;&gt;structures&lt;/a&gt; and some standard functions. These functions then take a pointer to their “parent” structure. Confusing? yes. But it works, and I see it used all over the place. Here a pseudocode example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct MyClass {
    int my_int; // Scpoed int
}

fn printMyNumber(MyClass* self){
    print(self.my_int);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printMyNumber&lt;/code&gt; takes a pointer to it’s “parent class”, called &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;. Look familiar? This is how Python works.&lt;/p&gt;

&lt;h2 id=&quot;lets-do-some-python&quot;&gt;Let’s do some Python&lt;/h2&gt;
&lt;p&gt;Alright.. Time for some “broken” Python. Here is yet another implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, except this time, each function is globally scoped:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# Private, globally scoped functions
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_init_myclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_myclass_printMyNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# struct-like class containing function pointers
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_init_myclass&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printMyNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myclass_printMyNumber&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code will still function like a normal class. Unlike a regular class definition, the above code defines the constructor and &lt;code class=&quot;highlighter-rouge&quot;&gt;printMyNumber&lt;/code&gt; methods in the global scope (marked as private with an underscore). A class is then created with function pointers to each of the global functions. This means that calling &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass.printMyNumber&lt;/code&gt; will point to, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;_myclass_printMyNumber&lt;/code&gt;. The interpreter still treats the underscore functions as members of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, and passes the &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; argument along to them.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;
&lt;p&gt;I have absolutely no idea why this would ever be useful. If you think you should start doing this in your code, &lt;strong&gt;don’t&lt;/strong&gt;. It leads to very messy and confusing code, and is bad practice in just about every way.&lt;/p&gt;

&lt;p&gt;The point of this post is to show yet another instance of the Python interpreter saying “&lt;a href=&quot;https://www.urbandictionary.com/define.php?term=idgaf&quot;&gt;idgaf&lt;/a&gt;”, and letting us have a little fun.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you know me, you probably know of the many weird things I do with python. Most recent of which being this FizzBuzz implementation in one line of python code: _=[print(&quot;FizzBuzz&quot;[_*_%3*4:8--_**4%5] or _) for _ in range(101)]</summary></entry><entry><title type="html">I did some cleaning</title><link href="http://0.0.0.0:4000/blog/2019/08/27/github-cleanup" rel="alternate" type="text/html" title="I did some cleaning" /><published>2019-08-27T08:37:00-04:00</published><updated>2019-08-27T08:37:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/08/27/GitHub-cleanup</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/08/27/github-cleanup">&lt;p&gt;As I am continuing to check items off my TODO list before school starts, I have come to an item I have been putting off for a while. &lt;strong&gt;Clean up GitHub Account&lt;/strong&gt;. Luckily, I discovered a little trick to make the process of deleting unused repos a little easier!&lt;/p&gt;

&lt;h2 id=&quot;getting-a-list-of-repos-to-delete&quot;&gt;Getting a list of repos to delete&lt;/h2&gt;
&lt;p&gt;I could have automated this, but I prefer a little control. To get the list, start by opening up a new Firefox window with a single tab. In this tab, open your GitHub profile to the list of repos.
Starting from the top, scroll through, and middle click on anything you want to delete. This opens it in a new tab.&lt;/p&gt;

&lt;p&gt;Once you have a bunch of tabs open with repos to remove, use &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/urls-list/&quot;&gt;this Firefox plugin&lt;/a&gt; to create a plaintext list of every link you opened, and paste the list of links into VS-code.&lt;/p&gt;

&lt;h2 id=&quot;getting-an-api-token&quot;&gt;Getting an API token&lt;/h2&gt;
&lt;p&gt;Next, an API token is needed. Go to GitHub’s &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;token settings&lt;/a&gt;, and generate a new one (make sure to enable repository deletion).&lt;/p&gt;

&lt;h2 id=&quot;parsing-the-links&quot;&gt;“Parsing” the links&lt;/h2&gt;
&lt;p&gt;With our new token, and out VS-code file, we can start “parsing” the data.&lt;/p&gt;

&lt;p&gt;Pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL + F&lt;/code&gt; brings up the Find/Search toolbar. In the text box, there are a few icons. Pressing the one farthest to the right will enable &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Regex&lt;/a&gt; mode. With this set, paste the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, click the arrow on the left to enable &lt;em&gt;replace mode&lt;/em&gt;, and put this in the new box:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XDELETE -H 'Authorization: token &amp;lt;API token from above&amp;gt;' &quot;https://api.github.com/repos/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then press &lt;em&gt;replace all&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, replace the contents of the first box with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the second with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;em&gt;replace all&lt;/em&gt; again.&lt;/p&gt;

&lt;h2 id=&quot;deleting-the-repos&quot;&gt;Deleting the repos&lt;/h2&gt;
&lt;p&gt;Simply copy the entire text file that was made, and paste it in a terminal, then press &amp;lt;enter&amp;gt; (this will take a while)&lt;/p&gt;</content><author><name></name></author><summary type="html">As I am continuing to check items off my TODO list before school starts, I have come to an item I have been putting off for a while. Clean up GitHub Account. Luckily, I discovered a little trick to make the process of deleting unused repos a little easier!</summary></entry><entry><title type="html">Keyed data encoding with Python</title><link href="http://0.0.0.0:4000/blog/2019/08/24/shift2" rel="alternate" type="text/html" title="Keyed data encoding with Python" /><published>2019-08-24T09:13:00-04:00</published><updated>2019-08-24T09:13:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/08/24/Shift2</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/08/24/shift2">&lt;p&gt;I have always been interested in text and data encoding, so last year, I made my first encoding tool. &lt;a href=&quot;https://github.com/Ewpratten/shift64&quot;&gt;Shift64&lt;/a&gt; was designed to take plaintext data with a key, and convert it into a block of base64 that could, in theory, only be decoded with the original key. I had a lot of fun with this tool, and a very stripped down version of it actually ended up as a bonus question on the &lt;a href=&quot;https://github.com/frc5024/Programming-Test/blob/master/test.md&quot;&gt;5024 Programming Test&lt;/a&gt; for 2018/2019. Yes, the key was in fact &lt;code class=&quot;highlighter-rouge&quot;&gt;5024&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This tool had some issues. Firstly, the code was a mess and only accepted hard-coded values. This made it very impractical as an every-day tool, and a nightmare to continue developing. Secondly, the encoder made use of entropy bits, and self modifying keys that would end up producing encoded files &amp;gt;1GB from just the word &lt;em&gt;hello&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;shift2&quot;&gt;Shift2&lt;/h2&gt;
&lt;p&gt;One of the oldest items on my TODO list has been to rewrite shift64, so I made a brand new tool out of it. &lt;a href=&quot;https://github.com/Ewpratten/shift&quot;&gt;Shift2&lt;/a&gt; is both a command-line tool, and a Python3 library that can efficiently encode and decode text data with a single key (unlike shift64, which used two keys concatenated into a single string, and separated by a colon).&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;
&lt;p&gt;Shift2 has two inputs. A &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;. These two strings are used to produce a single output, the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When encoding a file, shift2 starts by encoding the raw data with &lt;a href=&quot;https://en.wikipedia.org/wiki/Ascii85&quot;&gt;base85&lt;/a&gt;, to ensure that all data being passed to the next stage can be represented as a UTF-8 string (even binary data). This base85 data is then XOR encrypted with a rotating key. This operation can be expressed with the following (this example ignores the base85 encoding steps):&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello reader! I am some input that needs to be encoded&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ewpratten&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output of this contains non-displayable characters. A second base85 encoding is used to fix this. Running the example snippet above, then base85 encoding the &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; once results in:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CIA~89YF&amp;gt;W1PTBJQBo*W6$nli7#$Zu9U2uI5my8n002}A3jh-XQWYCi2Ma|K9uW=@5di
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If using the shift2 commandline tool, you would see a different output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;B2-is8Y&amp;amp;4!ED2H~Ix&amp;lt;~LOCfn@P;xLjM_E8(awt`1YC&amp;lt;SaOLbpaL^T!^W_ucF8Er~?NnC$&amp;gt;e0@WAWn2bqc6M1yP+DqF4M_kSCp0uA5h-&amp;gt;H
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is for a few reasons. Firstly, as mentioned above, shift2 uses base85 &lt;strong&gt;twice&lt;/strong&gt;. Once before, and once after XOR encryption. Secondly, a file header is prepended to the output to help the decoder read the file. This header contains version info, the file length, and the encoding type.&lt;/p&gt;

&lt;h3 id=&quot;try-it-yourself-with-pip&quot;&gt;Try it yourself with PIP&lt;/h3&gt;
&lt;p&gt;I have published shift2 on &lt;a href=&quot;https://pypi.org/project/shift-tool/&quot;&gt;pypi.org&lt;/a&gt; for use with PIP. To install shift2, ensure both &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt; are installed on your computer, then run:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install shift2&lt;/span&gt;
pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;shift-tool

&lt;span class=&quot;c&quot;&gt;# View the help for shift2&lt;/span&gt;
shift2 &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;demo&quot;&gt;
  &lt;h3 id=&quot;try-it-in-the-browser&quot;&gt;Try it in the browser&lt;/h3&gt;
  &lt;p&gt;I have ported the core code from shift2 to &lt;a href=&quot;http://www.brython.info/index.html&quot;&gt;run in the browser&lt;/a&gt;. This demo is entirely client-side, and may take a few seconds to load depending on your device.&lt;/p&gt;

  &lt;p&gt;&lt;input type=&quot;radio&quot; id=&quot;encode&quot; name=&quot;shift-action&quot; value=&quot;encode&quot; checked=&quot;&quot; /&gt;
&lt;label for=&quot;encode&quot;&gt;Encode&lt;/label&gt;
&lt;input type=&quot;radio&quot; id=&quot;decode&quot; name=&quot;shift-action&quot; value=&quot;decode&quot; /&gt;
&lt;label for=&quot;decode&quot;&gt;Decode&lt;/label&gt;&lt;/p&gt;

  &lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;key&quot; name=&quot;key&quot; placeholder=&quot;Encoding key&quot; required=&quot;&quot; /&gt;&lt;br /&gt;
&lt;input type=&quot;text&quot; id=&quot;msg&quot; name=&quot;msg&quot; placeholder=&quot;Message&quot; required=&quot;&quot; size=&quot;30&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; id=&quot;shift-button&quot; disabled=&quot;&quot;&gt;shift2 demo is loading… (this may take a few seconds)&lt;/button&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;future-plans&quot;&gt;Future plans&lt;/h3&gt;
&lt;p&gt;Due to the fact that shift2 can also be used as a library (as outlined in the &lt;a href=&quot;https://github.com/Ewpratten/shift/blob/master/README.md&quot;&gt;README&lt;/a&gt;), I would like to write a program that allows users to talk to eachother IRC style over a TCP port. This program would use either a pre-shared, or generated key to encode / decode messages on the fly.&lt;/p&gt;

&lt;p&gt;If you are interested in helping out, or taking on this idea for yourself, send me an email.&lt;/p&gt;

&lt;!-- Python code --&gt;
&lt;script type=&quot;text/python&quot; src=&quot;/assets/python/shift2/shift2demo.py&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">I have always been interested in text and data encoding, so last year, I made my first encoding tool. Shift64 was designed to take plaintext data with a key, and convert it into a block of base64 that could, in theory, only be decoded with the original key. I had a lot of fun with this tool, and a very stripped down version of it actually ended up as a bonus question on the 5024 Programming Test for 2018/2019. Yes, the key was in fact 5024.</summary></entry><entry><title type="html">How I set up ひらがな input on my laptop</title><link href="http://0.0.0.0:4000/blog/2019/08/12/setting-up-ja" rel="alternate" type="text/html" title="How I set up ひらがな input on my laptop" /><published>2019-08-12T15:40:00-04:00</published><updated>2019-08-12T15:40:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/08/12/Setting-up-JA</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/08/12/setting-up-ja">&lt;p&gt;I am currently working with &lt;a href=&quot;https://en.wikipedia.org/wiki/Hiragana&quot;&gt;ひらがな&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Katakana&quot;&gt;かたかな&lt;/a&gt;, and, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanji&quot;&gt;かんじ&lt;/a&gt; in some projects, and needed a more reliable way to write than running some &lt;a href=&quot;https://en.wikipedia.org/wiki/Romanization_of_Japanese&quot;&gt;romaji&lt;/a&gt; through an online translator. So, this post will detail what I did to enable native inputs on my laptop. This guide is specifically for &lt;a href=&quot;https://i3wm.org/&quot;&gt;i3wm&lt;/a&gt;, because it does not obey system settings for languages and inputs.&lt;/p&gt;

&lt;h2 id=&quot;adding-font-support-to-linux&quot;&gt;Adding font support to Linux&lt;/h2&gt;
&lt;p&gt;Firstly, we need fonts. Depending on your system, these may already be installed. For Japanese, I only used &lt;code class=&quot;highlighter-rouge&quot;&gt;vlgothic&lt;/code&gt;, so here in the package for it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install fonts-vlgothic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;language-support&quot;&gt;Language support&lt;/h2&gt;
&lt;p&gt;Im not sure if this matters, but I have seen other people do it, so why not be safe?&lt;/p&gt;

&lt;p&gt;I am currently running a stock Ubuntu &lt;a href=&quot;&quot;&gt;18.04&lt;/a&gt; base, which means that everything is pre-configured for Gnome. To set language support in Gnome, pull up the settings panel:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This line fixes some compatibility issues between &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Gnome and I3 when launching the settings menu. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# I recommend aliasing it.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XDG_CURRENT_DESKTOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GNOME gnome-control-center
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/language-settings.png&quot; alt=&quot;Gnome language settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, go to &lt;em&gt;Settings &amp;gt; Language and Region &amp;gt; Input Sources&lt;/em&gt;, and click on &lt;em&gt;Manage Installed Languages&lt;/em&gt;.
This will bring up a window where you can select a new language to install. From here, I clicked on &lt;em&gt;Install / Remove Language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/language-installation.png&quot; alt=&quot;Language installation panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this list, I just selected the languages I wanted (English and Japanese), and applied my changes. You may be asked to enter your password while installing the new languages. Once installation is complete, log out, and in again.&lt;/p&gt;

&lt;p&gt;With the new language support installed, return to the &lt;em&gt;Input Sources&lt;/em&gt; settings, and press the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; button to add a new language. From here, search the language you want (it may be under &lt;em&gt;Other&lt;/em&gt;) and select it. For Japanese, select the &lt;code class=&quot;highlighter-rouge&quot;&gt;mozc&lt;/code&gt; variant.&lt;/p&gt;

&lt;p&gt;Gnome’s language settings are now configured. If you are using Gnome (not I3), you can stop here.&lt;/p&gt;

&lt;h2 id=&quot;configuring-ibus&quot;&gt;Configuring ibus&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong, I love I3wm, but sometimes it’s configurability drives me crazy.&lt;/p&gt;

&lt;p&gt;After searching through various forums and wikis looking for an elegant way to switch languages in I3, I found a link to an &lt;a href=&quot;https://wiki.archlinux.org/index.php/IBus&quot;&gt;ArchWiki page&lt;/a&gt; at the bottom of a mailing list (I blame Google for not showing this sooner). It turns out that a program called &lt;code class=&quot;highlighter-rouge&quot;&gt;ibus&lt;/code&gt; is exactly what I needed. Here is how to set it up:&lt;/p&gt;

&lt;p&gt;Remember &lt;code class=&quot;highlighter-rouge&quot;&gt;mozc&lt;/code&gt; from above? If you are not using it, this package may not work. Search for the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;ibus-&lt;/code&gt; package for your selected language(s).&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install ibus-mozc for Japanese (mozc)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ibus-mozc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that &lt;code class=&quot;highlighter-rouge&quot;&gt;ibus&lt;/code&gt; is installed, run the setup script:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ibus-setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ibus-general.png&quot; alt=&quot;Ibus settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here, set your shortcut to something not used by I3 (I chose &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+Shift+Space&lt;/code&gt;, but most people prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+Space&lt;/code&gt;), and enable the system tray icon.
Now, go to the &lt;em&gt;Input Method&lt;/em&gt; settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ibus-input.png&quot; alt=&quot;Ibus input settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here, press the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, and add your language(s).&lt;/p&gt;

&lt;h2 id=&quot;configuring-profile&quot;&gt;Configuring .profile&lt;/h2&gt;
&lt;p&gt;According to the Wiki page, I needed to add the following to my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Language support&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ibus
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;@im&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ibus
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ibus
ibus-daemon &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turns out that this &lt;a href=&quot;https://github.com/ibus/ibus/issues/2020&quot;&gt;causes issues with some browsers&lt;/a&gt;, so I actually put &lt;em&gt;this&lt;/em&gt; in my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Language support&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xim
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;@im&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ibus
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xim
ibus-daemon &lt;span class=&quot;nt&quot;&gt;-drx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, log out and in again to let ibus properly start again, and there should now be a new applet in your bar for language settings.&lt;/p&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ibus&lt;/code&gt; runs in the background and will show an indication of your selected language upon pressing the keyboard shortcut set in the &lt;a href=&quot;#configuring-ibus&quot;&gt;setup tool&lt;/a&gt;. For languages like Japanese, where it’s writing systems do not use the English / Latin-based alphabets, &lt;code class=&quot;highlighter-rouge&quot;&gt;ibus&lt;/code&gt; will automatically convert your words as you type (this behavior will be different from language to language).&lt;/p&gt;

&lt;p&gt;An example of this is as follows. I want to write the word &lt;em&gt;Computer&lt;/em&gt; in Japanese (Katakana to be exact). I would switch to &lt;code class=&quot;highlighter-rouge&quot;&gt;mozc&lt;/code&gt; input, and start typing the romaji word for computer, &lt;em&gt;Pasokon&lt;/em&gt;. This will automatically be converted to Hiragana, &lt;em&gt;ぱそこん&lt;/em&gt;. &lt;em&gt;Computer&lt;/em&gt; is not a word that one would write in Hiragana as far as I know, so Katakana would be a better choice. To convert this word, I just press &lt;code class=&quot;highlighter-rouge&quot;&gt;Space&lt;/code&gt; (This is indicated in the bottom left of my screen by &lt;code class=&quot;highlighter-rouge&quot;&gt;ibus&lt;/code&gt;), and I now have &lt;em&gt;パソコン&lt;/em&gt;, the Katakana word for &lt;em&gt;Computer&lt;/em&gt;!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;after-note-languages&quot;&gt;After Note: Languages&lt;/h4&gt;
&lt;p&gt;In case you can’t tell, English is my native language. If I messed up my spelling or context with the small amount of Japanese in this post, &lt;a href=&quot;/about#chat-with-me&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;</content><author><name></name></author><summary type="html">I am currently working with ひらがな, かたかな, and, かんじ in some projects, and needed a more reliable way to write than running some romaji through an online translator. So, this post will detail what I did to enable native inputs on my laptop. This guide is specifically for i3wm, because it does not obey system settings for languages and inputs.</summary></entry><entry><title type="html">My weird piece of EDC</title><link href="http://0.0.0.0:4000/blog/2019/08/10/why-i-carry-nfc" rel="alternate" type="text/html" title="My weird piece of EDC" /><published>2019-08-10T16:57:00-04:00</published><updated>2019-08-10T16:57:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/08/10/Why-I-Carry-NFC</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/08/10/why-i-carry-nfc">&lt;p&gt;Im back with a quick little post about something I cary with me everywhere I go, EDC (Every-Day Carry) if you will.&lt;/p&gt;

&lt;h2 id=&quot;how-this-started&quot;&gt;How this started&lt;/h2&gt;
&lt;p&gt;Earlier this year, my friend @retrax24 showed me a piece of “fake ID” he was given as a joke. After some experimentation, he noticed that, upon tapping it to his phone, he would get an error message about an un-formatted card.&lt;/p&gt;

&lt;p&gt;After hearing of this, I opened up &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.wakdev.nfctools.pro&quot;&gt;NFC Tools&lt;/a&gt; on my phone and started playing. We had quite some fun with &lt;a href=&quot;#shenanigans&quot;&gt;various settings and data&lt;/a&gt;, and I decided that I wanted a card too. I send a message to someone that I knew worked with these, and got myself 4 to play with.&lt;/p&gt;

&lt;h2 id=&quot;shenanigans&quot;&gt;Shenanigans&lt;/h2&gt;
&lt;p&gt;Upon figuring out how to write to @retrax24’s card, we started out simple. We sent bits of text to eachother, and I eventually sent him a copy of my contact information, and bitcoin address. Then, came the real fun..&lt;/p&gt;

&lt;p&gt;By setting the data type to &lt;code class=&quot;highlighter-rouge&quot;&gt;external link&lt;/code&gt;, and the content to &lt;a href=&quot;https://www.youtube.com/watch?v=dQw4w9WgXcQ&quot;&gt;this totally not suspicious URL&lt;/a&gt;, we now had the perfect tool for derailing a lesson. An automatic &lt;a href=&quot;https://en.wikipedia.org/wiki/Rickrolling&quot;&gt;Rick Roll&lt;/a&gt; card. Upon tapping this card to a phone, the youtube app would auto-play &lt;em&gt;Rick Astley’s Never Gonna Give You Up&lt;/em&gt;. After this discovery, people started asking to buy pre-configured cards from me :laughing:.&lt;/p&gt;

&lt;p&gt;After this came even more fun ideas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Enabling flashlights&lt;/li&gt;
  &lt;li&gt;Rebooting phones&lt;/li&gt;
  &lt;li&gt;Calling phone numbers&lt;/li&gt;
  &lt;li&gt;Sending texts&lt;/li&gt;
  &lt;li&gt;Filling phones with fake contacts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;practical-use&quot;&gt;Practical use&lt;/h2&gt;
&lt;p&gt;I don’t actually carry my cards around for messing with people but instead, use them for things like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cloning hotel access cards (being in a room of 4 with only 2 cards)&lt;/li&gt;
  &lt;li&gt;Creating login cards for school printers (so I don’t have to log in manually)&lt;/li&gt;
  &lt;li&gt;Sharing small amounts of data and links between phones&lt;/li&gt;
  &lt;li&gt;Giving my contact info to people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to the NFC Tools app, pretty much everything is 3 taps and a swipe away. I strongly recommend picking up some cards for yourself if wou work with a large number of NFC-compatible systems.&lt;/p&gt;

&lt;h2 id=&quot;an&quot;&gt;A/N&lt;/h2&gt;
&lt;p&gt;Occasionally, I either have nothing in the works, or am working on some very boring and technical projects, so I look to post some fun content like this. Currently the latter of the options is true, and I wanted a quick break from writing networking code.&lt;/p&gt;

&lt;p&gt;Let me know what you think of this type of content!&lt;/p&gt;</content><author><name></name></author><summary type="html">Im back with a quick little post about something I cary with me everywhere I go, EDC (Every-Day Carry) if you will.</summary></entry><entry><title type="html">Mind map generation with Python</title><link href="http://0.0.0.0:4000/blog/2019/07/15/mindmap" rel="alternate" type="text/html" title="Mind map generation with Python" /><published>2019-07-15T14:38:00-04:00</published><updated>2019-07-15T14:38:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/07/15/MindMap</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/07/15/mindmap">&lt;p&gt;While working on an assignment with &lt;a href=&quot;https://coggle.it&quot;&gt;Coggle&lt;/a&gt; today, I noticed an interesting option in the save menu. &lt;em&gt;Download as .mm file&lt;/em&gt;. Having rarely worked with mind maps before, and only doing it online, it never occured to me that someone would have a file format for it. So I took a look.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-mm-file&quot;&gt;What is a .mm file?&lt;/h2&gt;
&lt;p&gt;It turns out, a &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; file is just some XML describing the mind map. Here is a simple mind map:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mindmap-simple.png&quot; alt=&quot;Simple Mind Map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And again as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.9.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TEXT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Master Node&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FOLDED=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;POSITION=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5d2d02b1a315dd0879f48c1c&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;X_COGGLE_POSX=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;X_COGGLE_POSY=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;edge&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;COLOR=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#b4b4b4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;NAME=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SIZE=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;17&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TEXT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Child branch&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FOLDED=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;POSITION=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f72704969525d2a0333dd635&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;edge&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;COLOR=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#7aa3e5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;NAME=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SIZE=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;15&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TEXT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Children 1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FOLDED=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;POSITION=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c83826af506cae6e55761d5c&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;edge&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;COLOR=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#7ea7e5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;NAME=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SIZE=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;13&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TEXT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Children 2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FOLDED=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;POSITION=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;47723a4d0fb766863f70d204&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;edge&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;COLOR=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#82aae7&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;NAME=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Helvetica&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SIZE=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;13&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/map&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Neat, right?&lt;/p&gt;

&lt;h2 id=&quot;what-can-we-do-with-it&quot;&gt;What can we do with it?&lt;/h2&gt;
&lt;p&gt;I have not done much research about this because I wanted to work all of this out on my own. But I know one thing as a fact: working with XML sucks (especially in Python). I decided that this would be much better if I could load &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; files as JSON. This would allow easy manipulation and some cool projects.&lt;/p&gt;

&lt;h2 id=&quot;my-script&quot;&gt;My script&lt;/h2&gt;
&lt;p&gt;Like everything I do, I made a script to play with these files.&lt;/p&gt;

&lt;p&gt;It’s pretty simple. First, It loads a &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; file, then parses it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;xml.etree.ElementTree.Element&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;raw_mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;raw_mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The parsed &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; is then passed into a recursive function that constructs a &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xmlToDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TEXT&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TEXT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;            
            &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlToDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Detect node type
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;leaf&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; is written to a file with &lt;code class=&quot;highlighter-rouge&quot;&gt;json.dump&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mind_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The whole script (with comments) can be found on my &lt;a href=&quot;https://gist.github.com/Ewpratten/0d8f7c7371380c9ca8adcfc6502ccf84#file-parser-py&quot;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-output&quot;&gt;The output&lt;/h2&gt;
&lt;p&gt;Running the &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; file from above through the script gives:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Master Node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Child branch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Children 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;leaf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Children 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;leaf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;branch&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;branch&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-next-step&quot;&gt;The next step&lt;/h2&gt;
&lt;p&gt;This script just translates a &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; file to JSON. Nothing else. Next, I want to convert this to a library, and add a JSON to &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; function as well. This leads into my ultimate goal for this project.&lt;/p&gt;

&lt;p&gt;I want a script that I can drop in the root of any project to build a &lt;a href=&quot;https://gource.io/&quot;&gt;Gource&lt;/a&gt;-style visualization of the folder structure. This will give me a way to make cool visualizations for lessons on the robotics team.&lt;/p&gt;</content><author><name></name></author><summary type="html">While working on an assignment with Coggle today, I noticed an interesting option in the save menu. Download as .mm file. Having rarely worked with mind maps before, and only doing it online, it never occured to me that someone would have a file format for it. So I took a look.</summary></entry><entry><title type="html">Taking a look back at GMAD</title><link href="http://0.0.0.0:4000/blog/2019/07/13/lookback-gmad" rel="alternate" type="text/html" title="Taking a look back at GMAD" /><published>2019-07-13T10:43:00-04:00</published><updated>2019-07-13T10:43:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/07/13/Lookback-GMAD</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/07/13/lookback-gmad">&lt;p&gt;One day, back in June of 2018, I was both looking for a new project to work on, and trying to decide which Linux distro to install on one of my computers. From this, a little project was born. &lt;a href=&quot;/gmad&quot;&gt;Give Me a Distro&lt;/a&gt; (or, GMAD, as I like to call it) is a little website that chooses a random distribution of Linux and shows a description of what you are about to get yourself into, and a download link for the latest ISO.&lt;/p&gt;

&lt;h2 id=&quot;backend-tech&quot;&gt;Backend tech&lt;/h2&gt;
&lt;p&gt;This is one of the simplest projects I have ever made. All the backend does is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Select a random number (n)&lt;/li&gt;
  &lt;li&gt;Fetch the nth item from a list of distros&lt;/li&gt;
  &lt;li&gt;Push the selected data to the user via DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;p&gt;This website is just plain HTML and CSS3, built without any CSS framework.&lt;/p&gt;

&lt;h2 id=&quot;my-regrets&quot;&gt;My regrets&lt;/h2&gt;
&lt;p&gt;There are two things I do not like about this project. Firstly, on load, the site breifly suggests Arch Linux before flashing to the random selection. This is due to the fact that Arch is the default for people with Javascript disabled. Some kind of loading animation would fix this.&lt;/p&gt;

&lt;p&gt;Secondly, the version of the site hosted on &lt;a href=&quot;https://retrylife.ca/gmad&quot;&gt;retrylife.ca&lt;/a&gt; is actually just an iframe to &lt;a href=&quot;https://ewpratten.github.io/GiveMeADistro&quot;&gt;ewpratten.github.io&lt;/a&gt; due to some CNAME issues.&lt;/p&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you would like to add a distro or three to the website, feel free to make a pull request over on &lt;a href=&quot;https://github.com/Ewpratten/GiveMeADistro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-make-a-post-about-it-a-year-later&quot;&gt;Why make a post about it a year later?&lt;/h2&gt;
&lt;p&gt;I just really enjoyed working with the project and sharing it with friends, so I figured I should mention it here too. Maybe it will inspire someone to make something cool!&lt;/p&gt;</content><author><name></name></author><summary type="html">One day, back in June of 2018, I was both looking for a new project to work on, and trying to decide which Linux distro to install on one of my computers. From this, a little project was born. Give Me a Distro (or, GMAD, as I like to call it) is a little website that chooses a random distribution of Linux and shows a description of what you are about to get yourself into, and a download link for the latest ISO.</summary></entry><entry><title type="html">Scraping FRC team’s GitHub accounts to gather large amounts of data</title><link href="http://0.0.0.0:4000/blog/2019/07/06/scrapingfrcgithub" rel="alternate" type="text/html" title="Scraping FRC team's GitHub accounts to gather large amounts of data" /><published>2019-07-06T11:08:00-04:00</published><updated>2019-07-06T11:08:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/07/06/ScrapingFRCGithub</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/07/06/scrapingfrcgithub">&lt;p&gt;I was curious about the most used languages for FRC, so I build a Python script to find out what they where.&lt;/p&gt;

&lt;h2 id=&quot;some-basic-data&quot;&gt;Some basic data&lt;/h2&gt;
&lt;p&gt;Before we get to the heavy work done by my script, let’s start with some general data.&lt;/p&gt;

&lt;p&gt;Thanks to the &lt;a href=&quot;https://www.thebluealliance.com/apidocs/v3&quot;&gt;TBA API&lt;/a&gt;, I know that there are 6917 registered teams. 492 of them have registered at least one account on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;how-the-script-works&quot;&gt;How the script works&lt;/h2&gt;
&lt;p&gt;The script is split into steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Get a list of every registered team&lt;/li&gt;
  &lt;li&gt;Check for a github account attached to every registered team
    &lt;ul&gt;
      &lt;li&gt;If a team has an account, it is added to the dataset&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Load each github profile
    &lt;ul&gt;
      &lt;li&gt;If it is a private account, move on&lt;/li&gt;
      &lt;li&gt;Use Regex to find all languages used&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile data and sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-a-list-of-accounts&quot;&gt;Getting a list of accounts&lt;/h3&gt;
&lt;p&gt;This is probably the simplest step in the whole process. I used the auto-generated &lt;a href=&quot;https://github.com/TBA-API/tba-api-client-python&quot;&gt;tbaapiv3client&lt;/a&gt; python library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;get_teams_keys(key)&lt;/code&gt; function, and kept incrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; until I got an empty array. All returned data was then added together into a big list of team keys.&lt;/p&gt;

&lt;h3 id=&quot;checking-for-a-teams-github-account&quot;&gt;Checking for a team’s github account&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.thebluealliance.com/apidocs/v3&quot;&gt;TBA API&lt;/a&gt; helpfully provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/v3/team/&amp;lt;number&amp;gt;/social_media&lt;/code&gt; API endpoint that will give the GitHub username for any team you request. (or nothing if they don’t use github)&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop on this with a list of every team number did the trick for finding accounts.&lt;/p&gt;

&lt;h3 id=&quot;fetching-language-info&quot;&gt;Fetching language info&lt;/h3&gt;
&lt;p&gt;To remove the need for an Oauth login to use the script, GitHub data is retrieved using standard HTTPS requests instead of AJAX requests to the API. This gets around the tiny rate limit, but takes a bit longer to complete.&lt;/p&gt;

&lt;p&gt;To check for language usage, a simple Regex pattern can be used: &lt;code class=&quot;highlighter-rouge&quot;&gt;/programmingLanguage&quot;\&amp;gt;(.*)\&amp;lt;/gm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When combined with an &lt;code class=&quot;highlighter-rouge&quot;&gt;re.findall()&lt;/code&gt;, this pattern will return a list of all recent languages used by a team.&lt;/p&gt;

&lt;h3 id=&quot;data-saves--backup-solution&quot;&gt;Data saves / backup solution&lt;/h3&gt;
&lt;p&gt;To deal with the fact that large amounts of data are being requested, and people might want to pause the script, I have created a system to allow for “savestates”.&lt;/p&gt;

&lt;p&gt;On launch of the script, it will check for a &lt;code class=&quot;highlighter-rouge&quot;&gt;./data.json&lt;/code&gt; file. If this does not exist, one will be created. Otherwise, the contents will be read. This file contains both all the saved data, and some counters.&lt;/p&gt;

&lt;p&gt;Each stage of the script contains a counter, and will increment the counter every time a team has been processed. This way, if the script is stopped and restarted, the parsers will just keep working from where they left off. This was very helpful when writing the script as, I needed to stop and start it every time I needed to implement a new feature.&lt;/p&gt;

&lt;p&gt;All parsing data is saved to the json file every time the script completes, or it detects a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;
&lt;p&gt;After letting the script run for about an hour, I got a bunch of data from every registered team.&lt;/p&gt;

&lt;p&gt;This data includes every project (both on and offseason) from each team, so teams that build t-shirt cannons using the CTRE HERO, would have C# in their list of languages. Things like that.&lt;/p&gt;

&lt;p&gt;Unsurprisingly, by far the most popular programming language is Java, with 3232 projects. These projects where all mostly, or entirely written in Java. Next up, we have C++ with 725 projects, and Python with 468 projects.&lt;/p&gt;

&lt;p&gt;After Java, C++, and Python, we start running in to languages used for dashboards, design, lessons, and offseason projects. Before I get to everything else, here is the usage of the rest of the valid languages for FRC robots:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;C (128)&lt;/li&gt;
  &lt;li&gt;LabView (153)&lt;/li&gt;
  &lt;li&gt;Kotlin (96)&lt;/li&gt;
  &lt;li&gt;Rust (4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the rest of the languages below Python:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;295 occurrences of JavaScript
153 occurrences of LabVIEW
128 occurrences of C
96 occurrences of Kotlin
72 occurrences of Arduino
71 occurrences of C#
69 occurrences of CSS
54 occurrences of PHP
40 occurrences of Shell
34 occurrences of Ruby
16 occurrences of Swift
16 occurrences of Jupyter Notebook
15 occurrences of Scala
12 occurrences of D
12 occurrences of TypeScript
9 occurrences of Dart
8 occurrences of Processing
7 occurrences of CoffeeScript
6 occurrences of Go
6 occurrences of Groovy
6 occurrences of Objective-C
4 occurrences of Rust
3 occurrences of MATLAB
3 occurrences of R
1 occurrences of Visual Basic
1 occurrences of Clojure
1 occurrences of Cuda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have removed markup and shell languages from that list because most of them are probably auto-generated.&lt;/p&gt;

&lt;p&gt;In terms of github account names, 133 teams follow FRC convention and use a username starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;frc&lt;/code&gt;, followed by their team number, 95 teams use &lt;code class=&quot;highlighter-rouge&quot;&gt;team&lt;/code&gt; then their number, and 264 teams use something else.&lt;/p&gt;

&lt;h2 id=&quot;using-the-script&quot;&gt;Using the script&lt;/h2&gt;
&lt;p&gt;This script is not on PYPI this time. You can obtain a copy from my GitHub repo: &lt;a href=&quot;https://github.com/Ewpratten/frc-code-stats&quot;&gt;https://github.com/Ewpratten/frc-code-stats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, make sure both &lt;code class=&quot;highlighter-rouge&quot;&gt;python3.7&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt; are installed on your computer. Next, delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;data.json&lt;/code&gt; file. Then, install the requirements with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install -r requirements.txt&lt;/code&gt;. Finally, run with &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 main.py&lt;/code&gt; to start the script. Now, go outside and enjoy nature for about an hour, and your data should be loaded!.&lt;/p&gt;</content><author><name></name></author><summary type="html">I was curious about the most used languages for FRC, so I build a Python script to find out what they where.</summary></entry><entry><title type="html">devDNS</title><link href="http://0.0.0.0:4000/blog/2019/07/01/devdns" rel="alternate" type="text/html" title="devDNS" /><published>2019-07-01T18:13:00-04:00</published><updated>2019-07-01T18:13:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/07/01/devDNS</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/07/01/devdns">&lt;p&gt;Over the past year and a half, I have been hacking my way around the undocumented &lt;a href=&quot;https://devrant.com&quot;&gt;devRant&lt;/a&gt; auth/write API. At the request of devRant’s creators, this API must not be documented due to the way logins work on the platform. That is besides the point. I have been working on a little project called &lt;a href=&quot;https://devrant.com/collabs/2163502&quot;&gt;devDNS&lt;/a&gt; over the past few days that uses this undocumented API. Why must I be so bad at writing intros?&lt;/p&gt;

&lt;h2 id=&quot;what-is-devdns&quot;&gt;What is devDNS&lt;/h2&gt;
&lt;p&gt;devDNS is a devRant bot written in python. It will serve any valid DNS query from any user on the platform. A query is just a comment in one of the following forms:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@devDNS example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@devDNS MX example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Of course, &lt;code class=&quot;highlighter-rouge&quot;&gt;MX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; are to be replaced with the domain and entry of your choosing.&lt;/p&gt;

&lt;p&gt;devDNS was inspired by &lt;a href=&quot;https://twitter.com/1111resolver&quot;&gt;@1111Resolver&lt;/a&gt;, and the source is available on &lt;a href=&quot;https://github.com/Ewpratten/devDNS&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The Python script behind devDNS is very simple. devDNS does the following every 10 seconds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fetch all new notifs&lt;/li&gt;
  &lt;li&gt;Find only mentions&lt;/li&gt;
  &lt;li&gt;Spin off a thread for each mention that passes a basic parser (Is the message 2 or 3 words long)&lt;/li&gt;
  &lt;li&gt;In the thread, check if the message is a control message (allows me to view the status of the bot via devRant)&lt;/li&gt;
  &lt;li&gt;Check if the request matches a required pattern&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspython&lt;/code&gt; with requested record and domain&lt;/li&gt;
  &lt;li&gt;Receive answer from a custom &lt;a href=&quot;https://pi-hole.net/&quot;&gt;PIHole&lt;/a&gt; server with caching and super low latency&lt;/li&gt;
  &lt;li&gt;Send a comment with the results to the requester&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats it! Super simple, and only two days from concept to reality.&lt;/p&gt;

&lt;h2 id=&quot;where-is-this-hosted&quot;&gt;Where is this hosted?&lt;/h2&gt;
&lt;p&gt;This program is hosted on a raspberry pi laying in my room running docker. I also have &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt; set up so I can easily monitor the bot from my phone over my VPN.&lt;/p&gt;</content><author><name></name></author><summary type="html">Over the past year and a half, I have been hacking my way around the undocumented devRant auth/write API. At the request of devRant’s creators, this API must not be documented due to the way logins work on the platform. That is besides the point. I have been working on a little project called devDNS over the past few days that uses this undocumented API. Why must I be so bad at writing intros?</summary></entry><entry><title type="html">I had some fun with a router</title><link href="http://0.0.0.0:4000/blog/2019/06/27/pwnlink" rel="alternate" type="text/html" title="I had some fun with a router" /><published>2019-06-27T13:16:00-04:00</published><updated>2019-06-27T13:16:00-04:00</updated><id>http://0.0.0.0:4000/blog/2019/06/27/PWNlink</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2019/06/27/pwnlink">&lt;p&gt;I was playing around with some D-link routers today and remembered an &lt;a href=&quot;https://www.exploit-db.com/exploits/33520&quot;&gt;ExploitDB Entry&lt;/a&gt; I read a while ago. Many D-link routers have a great feature that allows remote management and configuration queries. Interestingly, this cannot be disabled, and one of the pages contains a cleartext version of the admin password (yay!).&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-yourself-an-admin-password&quot;&gt;How to get yourself an admin password&lt;/h2&gt;
&lt;p&gt;On any supported router, make an HTTP request to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://your.router.ip.addr/tools_admin.asp/&lt;/code&gt;. This will return a pretty large XML file containing information about your router’s hardware and configuration.&lt;/p&gt;

&lt;p&gt;Notice the fact that you did not have to log in. This is due to the fact that this file seems to be used by a remote management service of some sort.&lt;/p&gt;

&lt;p&gt;The important thing to note here is that, when parsed with the regex pattern: &lt;code class=&quot;highlighter-rouge&quot;&gt;name=&quot;user_password_tmp&quot; value=&quot;(.*)&quot;&amp;gt;&lt;/code&gt;, you get a single string. This string is the admin password of the device.&lt;/p&gt;

&lt;h2 id=&quot;supported-routers&quot;&gt;Supported routers&lt;/h2&gt;
&lt;p&gt;This is supported by many D-link routers. The ones I know about are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DIR-835&lt;/li&gt;
  &lt;li&gt;DIR-855L&lt;/li&gt;
  &lt;li&gt;DGL-5500&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some routers have this XML file, but it is restricted… By a user without a password. These are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DHP-1565&lt;/li&gt;
  &lt;li&gt;DIR-652&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pwnlink&quot;&gt;PWNlink&lt;/h2&gt;
&lt;p&gt;Like everything I play with, I made a script to do this all for me (and spent a large amount of time adding colours to the text).&lt;/p&gt;

&lt;p&gt;My script is called PWNlink (PWN + D-link), It automatically finds a router on your network by looking for a specific DNS entry created by many D-link routers, then checking your gateway. Next, PWNlink reads you router’s &lt;code class=&quot;highlighter-rouge&quot;&gt;hnap1&lt;/code&gt; config to find it’s model number. If supported, the script will read and parse the appropriate configs to give you the admin credentials for your router.&lt;/p&gt;

&lt;p&gt;PWNlink can be installed on any *nix computer that has both &lt;code class=&quot;highlighter-rouge&quot;&gt;python3.7&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt; installed. To install PWNlink, run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install pwnlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the script without any arguments for automatic detection, or pass any IP address to use manual detection.&lt;/p&gt;

&lt;h2 id=&quot;disclamier-thingy&quot;&gt;Disclamier thingy&lt;/h2&gt;
&lt;p&gt;I don’t see much point to these, but I should probably put one anyways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t be dumb with this script.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have only used it on my own (or 5024’s) routers, and did not create PWNlink with any malicious intent.&lt;/p&gt;</content><author><name></name></author><category term="projects" /><summary type="html">I was playing around with some D-link routers today and remembered an ExploitDB Entry I read a while ago. Many D-link routers have a great feature that allows remote management and configuration queries. Interestingly, this cannot be disabled, and one of the pages contains a cleartext version of the admin password (yay!).</summary></entry></feed>